// Code generated by entc, DO NOT EDIT.

package ent

import (
	"align/ent/test"
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
)

// Test is the model entity for the Test schema.
type Test struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Field1 holds the value of the "field1" field.
	Field1 bool `json:"field1,omitempty"`
	// Field2 holds the value of the "field2" field.
	Field2 float64 `json:"field2,omitempty"`
	// Field3 holds the value of the "field3" field.
	Field3 int32 `json:"field3,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Test) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullBool{},    // field1
		&sql.NullFloat64{}, // field2
		&sql.NullInt64{},   // field3
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Test fields.
func (t *Test) assignValues(values ...interface{}) error {
	if m, n := len(values), len(test.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	t.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullBool); !ok {
		return fmt.Errorf("unexpected type %T for field field1", values[0])
	} else if value.Valid {
		t.Field1 = value.Bool
	}
	if value, ok := values[1].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field field2", values[1])
	} else if value.Valid {
		t.Field2 = value.Float64
	}
	if value, ok := values[2].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field field3", values[2])
	} else if value.Valid {
		t.Field3 = int32(value.Int64)
	}
	return nil
}

// Update returns a builder for updating this Test.
// Note that, you need to call Test.Unwrap() before calling this method, if this Test
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Test) Update() *TestUpdateOne {
	return (&TestClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (t *Test) Unwrap() *Test {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Test is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Test) String() string {
	var builder strings.Builder
	builder.WriteString("Test(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", field1=")
	builder.WriteString(fmt.Sprintf("%v", t.Field1))
	builder.WriteString(", field2=")
	builder.WriteString(fmt.Sprintf("%v", t.Field2))
	builder.WriteString(", field3=")
	builder.WriteString(fmt.Sprintf("%v", t.Field3))
	builder.WriteByte(')')
	return builder.String()
}

// Tests is a parsable slice of Test.
type Tests []*Test

func (t Tests) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
